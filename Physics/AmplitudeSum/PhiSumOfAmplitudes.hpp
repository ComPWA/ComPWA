/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef PHISUMOFAMPLITUDES
#define PHISUMOFAMPLITUDES

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooListProxy.h"

#include "Physics/AmplitudeSum/AmpRelBreitWignerRes.hpp"
#include "Physics/AmplitudeSum/AmpWigner.hpp"

class TIterator;
class RooRealVar;
 
class PhiSumOfAmplitudes : public RooAbsPdf {
public:
  PhiSumOfAmplitudes() {} ; 
  PhiSumOfAmplitudes(const char *name, const char *title);
  PhiSumOfAmplitudes(const PhiSumOfAmplitudes& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new PhiSumOfAmplitudes(*this,newname); }
  inline virtual ~PhiSumOfAmplitudes() { }

  void addBW(AmpRelBreitWignerRes*, RooRealVar&, RooRealVar&);
  void addBW(AmpRelBreitWignerRes*, RooRealVar&, RooRealVar&, AmpWigner*);
  
protected:

  Double_t evaluate() const ;

private:
  RooListProxy _pdfList ;   //  List of component PDFs
  RooListProxy _intList;    //  List of relative intensities
  RooListProxy _phaseList;  //  List of relative phases
  RooListProxy _angList ;   //  List of component angular distributions

  TIterator* _pdfIter  ;
  TIterator* _intIter  ;
  TIterator* _phaseIter;
  TIterator* _angIter;

  //ClassDef(PhiSumOfAmplitudes,1) // Your description goes here...
};
 
#endif
