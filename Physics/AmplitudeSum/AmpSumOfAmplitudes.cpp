/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include <cmath> 

#include "Riostream.h" 
#include "TMath.h" 

#include "RooAbsReal.h" 
#include "RooRealVar.h"
#include "RooAbsCategory.h" 
#include "RooLinkedListIter.h"

#include "qft++.h"

#include "Physics/AmplitudeSum/AmpSumOfAmplitudes.hpp"

using namespace ROOT;

//ClassImp(AmpSumOfAmplitudes);

AmpSumOfAmplitudes::AmpSumOfAmplitudes() :
       RooAbsPdf("Empty","Empty")
{

}

 AmpSumOfAmplitudes::AmpSumOfAmplitudes(const char *name, const char *title) :
   RooAbsPdf(name,title)
 { 

 } 


 AmpSumOfAmplitudes::AmpSumOfAmplitudes(const AmpSumOfAmplitudes& other, const char* name) :  
   RooAbsPdf(other,name)
 { 

 } 

 AmpSumOfAmplitudes::~AmpSumOfAmplitudes(){
   //something TODO?
 }

void AmpSumOfAmplitudes::addBW(std::shared_ptr<AmpAbsDynamicalFunction> theRes , std::shared_ptr<RooRealVar> r, std::shared_ptr<RooRealVar> phi, std::shared_ptr<AmpWigner> theAng) {
  _pdfList.push_back(theRes);
  _intList.push_back(r);
  _phaseList.push_back(phi);
  _angList.push_back(theAng);
}

void AmpSumOfAmplitudes::addBW(std::shared_ptr<AmpAbsDynamicalFunction> theRes , std::shared_ptr<RooRealVar> r, std::shared_ptr<RooRealVar> phi) {
  _pdfList.push_back(theRes);
  _intList.push_back(r);
  _phaseList.push_back(phi);
  /*RooRealVar beta("beta", "mass", 0.);
  RooRealVar j ("j", "j", 0.);
  RooRealVar m ("m", "m", 0.);
  RooRealVar n ("n", "n", 0.) ; 
  _angList.add(AmpWigner("none", "none", beta, j, m, n));*/
  _angList.push_back(std::shared_ptr<AmpWigner>(new AmpWigner()));
}


 Double_t AmpSumOfAmplitudes::evaluate() const
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   RooComplex res;

   //std::cout << "res = \t" << res.abs2() << std::endl;

   for(unsigned int i=0; i<_pdfList.size(); i++){
     double a = _intList[i]->getVal();
     double phi = _phaseList[i]->getVal();
     RooComplex eiphi (a*cos(phi),a*sin(phi));

     //std::cout << "a = \t" << a << std::endl;
     //std::cout << "phi = \t" << phi << std::endl;
     //std::cout << "BW = \t" << _pdfList[i]->evaluate() << std::endl;
     //std::cout << "AD = \t" << _angList[i]->evaluate() << std::endl;

     RooComplex twoJplusOne(2*_pdfList[i]->getSpin()+1);
//     res = res + twoJplusOne * _pdfList[i]->evaluate() * a * eiphi * _angList[i]->evaluate();
     res = res + twoJplusOne * _pdfList[i]->evaluate() * eiphi * _angList[i]->evaluate();

//     std::cout<<_pdfList[i]->GetName()<<" "<<_pdfList[i]->evaluate() << " " <<eiphi<< " "<<_angList[i]->evaluate()<<std::endl;
   }
//   std::cout<<"=="<<res<<std::endl;
//   std::cout<<"=="<<res.abs2()<<std::endl;

   //std::cout << "res final = \t" << res.abs2() << std::endl;

   return res.abs2() ; 
 } 

 Double_t AmpSumOfAmplitudes::evaluateSlice(RooComplex* reso, unsigned int nResos, unsigned int subSys=1) const
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   RooComplex res;

   int itReso=0, sys=0;

   for(unsigned int i=0; i<_pdfList.size(); i++){
     double a = _intList[i]->getVal();
     double phi = _phaseList[i]->getVal();
     RooComplex eiphi (cos(phi), sin(phi));
     if(itReso<3) sys = 0; //TODO: way better!!!
     else if(itReso<5) sys = 1;
     //else sys = 2;
     //sys = itReso;

     if(_pdfList[i]->isSubSys(subSys))
       res = res + reso[sys] * _angList[i]->evaluate();
     else
       res = res + _pdfList[i]->evaluate() * a * eiphi * _angList[i]->evaluate();

     itReso++;
   }

   return res.abs2() ; 
 } 

 /*Double_t AmpSumOfAmplitudes::evaluatePhi() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   RooComplex res;

   AmpRelBreitWignerRes *pdf;
   RooRealVar *theInt;
   RooRealVar *thePhase;
   AmpWigner *ang;

   _pdfIter->Reset();
   _intIter->Reset();
   _phaseIter->Reset();
   _angIter->Reset();

   //   TIterator* _pdfIter = _pdfList.createIterator() ;
   //   AmpRelBreitWignerRes *pdf;


   while((pdf      = (AmpRelBreitWignerRes*)_pdfIter->Next()) &&
	 (theInt   = (RooRealVar*)_intIter->Next())        && 
	 (thePhase = (RooRealVar*)_phaseIter->Next())      &&
         (ang      = (AmpWigner*)_angIter->Next())  ) {
     double a = theInt->getVal();
     double phi = thePhase->getVal();
     RooComplex eiphi (cos(phi), sin(phi));

     res = res + pdf->evaluate() * a * eiphi * ang->evaluate();
   }

   return atan2(res.im(),res.re()); 
 } */

