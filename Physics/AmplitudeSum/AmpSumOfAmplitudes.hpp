//-------------------------------------------------------------------------------
// Copyright (c) 2013 Mathias Michel.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the GNU Public License v3.0
// which accompanies this distribution, and is available at
// http://www.gnu.org/licenses/gpl.html
//
// Contributors:
//     Mathias Michel - initial API and implementation
//-------------------------------------------------------------------------------
/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef AMPSUMOFAMPLITUDES
#define AMPSUMOFAMPLITUDES

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
//#include "RooListProxy.h"

#include "Physics/AmplitudeSum/AmpAbsDynamicalFunction.hpp"
#include "Physics/AmplitudeSum/AmpWigner.hpp"

#include <vector>
#include <memory>

//class TIterator;
class RooRealVar;
 
class AmpSumOfAmplitudes : public RooAbsPdf {
public:
  AmpSumOfAmplitudes();
  AmpSumOfAmplitudes(const char *name, const char *title);
  AmpSumOfAmplitudes(const AmpSumOfAmplitudes& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new AmpSumOfAmplitudes(*this,newname); }
  virtual ~AmpSumOfAmplitudes();

  void addBW(std::shared_ptr<AmpAbsDynamicalFunction>, std::shared_ptr<RooRealVar>, std::shared_ptr<RooRealVar>);
  void addBW(std::shared_ptr<AmpAbsDynamicalFunction>, std::shared_ptr<RooRealVar>, std::shared_ptr<RooRealVar>, std::shared_ptr<AmpWigner>);

  Double_t evaluateSlice(RooComplex*, unsigned int, unsigned int) const ;
  Double_t evaluate() const ;

protected:
  std::vector<std::shared_ptr<AmpAbsDynamicalFunction> > _pdfList ;   //  List of component PDFs
  std::vector<std::shared_ptr<RooRealVar> > _intList;    //  List of relative intensities
  std::vector<std::shared_ptr<RooRealVar> > _phaseList;  //  List of relative phases
  std::vector<std::shared_ptr<AmpWigner> > _angList ;   //  List of component angular distributions

};
 
#endif
